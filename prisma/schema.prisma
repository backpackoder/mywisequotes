// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  email         String   @unique
  emailVerified DateTime?
  username      String    @unique @default(cuid()) @db.VarChar(25)
  name          String?   @db.VarChar(25)
  image         String?
  bio           String?   @db.Text
  nationality   String?
  role          Role      @default(USER)
  emailUpdates  Boolean   @default(false)
  language      String    @default("")

  accounts      Account[]
  sessions      Session[]
  followedBy    Follows[] @relation("following")
  following     Follows[] @relation("follower")

  quotes   Quote[]
  createdQuotes    Quote[]  @relation("createdQuotes")
  updatedQuotes    Quote[]  @relation("updatedQuotes")
  favoriteQuotes  FavoriteQuote[]

  authors  Author[]
  createdAuthors   Author[] @relation("createdAuthors")
  updatedAuthors   Author[] @relation("updatedAuthors")
  favoriteAuthors  FavoriteAuthor[]

  comments         Comment[]
  commentLikes     CommentLike[]
  commentReplies   CommentReply[]
}

model Follows {
  follower       User     @relation("follower", fields: [followerId], references: [id])
  followerId     String
  following      User     @relation("following", fields: [followingId], references: [id])
  followingId    String

  @@id([followerId, followingId])
}

model FavoriteQuote {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  quote           Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId         String

  @@unique([userId, quoteId])
}

model FavoriteAuthor {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  author          Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String

  @@unique([userId, authorId])
}

model Quote {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  createdBy       User              @relation("createdQuotes", fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String
  updatedAt       DateTime?          @updatedAt
  updatedBy       User[]             @relation("updatedQuotes")

  translations    QuoteTranslation[]
  date            String?
  author          Author            @relation(fields: [authorId], references: [id])
  authorId        String
  tags            Tag[]
  sources          String[]
  
  favoritedBy     User[]
  favoritedById   String[]
  favorites       FavoriteQuote[]
  comments        Comment[]
}

model QuoteTranslation {
  id              String   @id @default(cuid())

  content         String
  isOriginal      Boolean

  quote           Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId         String
  language        Language @relation(fields: [languageId], references: [id])
  languageId      String

  @@unique([quoteId, isOriginal])
  @@unique([quoteId, languageId])
}

model Tag {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  englishName     String   @unique
  translations    TagTranslation[]

  quotes          Quote[]
}

model TagTranslation {
  id              String   @id @default(cuid())

  name            String

  tag             Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId           String
  language        Language @relation(fields: [languageId], references: [id])
  languageId      String

  @@unique([name, languageId])
}

model Comment {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  content         String
  likes           CommentLike[]
  replies         CommentReply[]

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  quote           Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId         String
}

model CommentLike {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  comment         Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId       String
  replies         CommentReply[]

  @@unique([userId, commentId])
}

model CommentReply {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  content         String
  likes           CommentLike[]

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  comment         Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId       String
}

model Author {
  id              String              @id @default(cuid())
  createdAt       DateTime            @default(now())
  createdBy       User                @relation("createdAuthors", fields: [createdById], references: [id], onDelete: Cascade)
  createdById     String
  updatedAt       DateTime            @updatedAt
  updatedBy       User[]              @relation("updatedAuthors")

  englishName     String              @unique
  translations    AuthorTranslation[]
  wikipediaLink   String?

  quotes          Quote[]
  favoriteAuthors FavoriteAuthor[]
  favoritedBy     User[]
  favoritedById   String[]
}

model AuthorTranslation {
  id              String   @id @default(cuid())
  
  name            String
  description     String?
  bio             String?
  isOriginal      Boolean  @default(false)

  author          Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String
  language        Language @relation(fields: [languageId], references: [id])
  languageId      String

  @@unique([authorId, languageId])
}

model Language {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  code            String   @unique
  englishName     String   @unique
  nativeName      String
  
  quotes          QuoteTranslation[]
  tags            TagTranslation[]
  authors         AuthorTranslation[]
}